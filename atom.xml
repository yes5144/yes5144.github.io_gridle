<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yes5144.github.io/</id>
    <title>Talk is cheap. Show me the code</title>
    <updated>2019-06-29T17:43:07.971Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yes5144.github.io/"/>
    <link rel="self" href="https://yes5144.github.io//atom.xml"/>
    <subtitle>唯手熟尔</subtitle>
    <logo>https://yes5144.github.io//images/avatar.png</logo>
    <icon>https://yes5144.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Talk is cheap. Show me the code</rights>
    <entry>
        <title type="html"><![CDATA[Linux 替代命令介绍]]></title>
        <id>https://yes5144.github.io//post/linux-ti-dai-ming-ling-jie-shao</id>
        <link href="https://yes5144.github.io//post/linux-ti-dai-ming-ling-jie-shao">
        </link>
        <updated>2019-06-29T17:27:50.000Z</updated>
        <content type="html"><![CDATA[<h4 id="tldrlinux-手册页的简化替代品">tldr：Linux 手册页的简化替代品</h4>
<blockquote>
<p>tldr: 如果你经常不想详读man文档，那么你应该试试这个小工具
参考链接：https://www.hi-linux.com/posts/16098.html
参考链接：https://zhuanlan.zhihu.com/p/52637238</p>
</blockquote>
<pre><code>yum install nodejs
yum install npm
npm install -g tldr
tldr --update
## 使用实例
tldr kill
</code></pre>
<h4 id="tmux终端复用工具替代screen-nohup">tmux：终端复用工具，替代screen、nohup</h4>
<pre><code>yum install tmux
</code></pre>
<h4 id="htop-提供更美观-更方便的进程监控工具替代top命令">htop: 提供更美观、更方便的进程监控工具，替代top命令</h4>
<h4 id="myclimysql客户端支持语法高亮和命令补全效果类似ipython可以替代mysql命令">mycli：mysql客户端，支持语法高亮和命令补全，效果类似ipython，可以替代mysql命令</h4>
<h4 id="yapfgoogle开发的python代码格式规范化工具支持pep8以及google代码风格">yapf：Google开发的python代码格式规范化工具，支持pep8以及Google代码风格</h4>
<h4 id="shellcheckshell脚本静态检查工具能够识别语法错误以及不规范的写法">shellcheck：shell脚本静态检查工具，能够识别语法错误以及不规范的写法</h4>
<h4 id="jq-json文件处理以及格式化显示支持高亮可以替换python-m-jsontool">jq: json文件处理以及格式化显示，支持高亮，可以替换python -m json.tool</h4>
<h4 id="axel多线程下载工具下载文件时可以替代curl-wget">axel：多线程下载工具，下载文件时可以替代curl、wget</h4>
<h4 id="mosh基于udp的终端连接可以替代ssh连接更稳定即使ip变了也能自动重连">mosh：基于UDP的终端连接，可以替代ssh，连接更稳定，即使IP变了，也能自动重连</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 安全加固]]></title>
        <id>https://yes5144.github.io//post/linux-an-quan-jia-gu</id>
        <link href="https://yes5144.github.io//post/linux-an-quan-jia-gu">
        </link>
        <updated>2019-06-29T17:08:28.000Z</updated>
        <content type="html"><![CDATA[<h4 id="ssh配置文件">ssh配置文件</h4>
<h4 id="防火墙">防火墙</h4>
<h4 id="ssh访问失败次数限制">ssh访问失败次数限制</h4>
<h4 id="安全扫描工具-nmap">安全扫描工具 - NMap</h4>
<blockquote>
<p>NMap 是 Linux 下的网络连接扫描和嗅探工具包用来扫描网上电脑开放的网络连接端。</p>
</blockquote>
<pre><code>yum install nmap

nmap 10.1.3.20 
nmap -o 10.1.3.20 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 监控工具]]></title>
        <id>https://yes5144.github.io//post/linux-jian-kong-gong-ju</id>
        <link href="https://yes5144.github.io//post/linux-jian-kong-gong-ju">
        </link>
        <updated>2019-06-29T16:53:49.000Z</updated>
        <content type="html"><![CDATA[<h4 id="top">top</h4>
<h4 id="进程实时监控-htop">进程实时监控 - HTop</h4>
<h4 id="实时监控磁盘-io-iotop">实时监控磁盘 IO-IOTop</h4>
<blockquote>
<p>IOTop 命令是专门显示硬盘 IO 的命令, 界面风格类似 top 命令。</p>
</blockquote>
<pre><code>yum install iotop
</code></pre>
<h4 id="系统资源监控-nmon">系统资源监控 - NMON</h4>
<blockquote>
<p>NMON 是一种在 AIX 与各种 Linux 操作系统上广泛使用的监控与分析工具</p>
</blockquote>
<pre><code>yum install nmon
</code></pre>
<h4 id="网络流量监控-iftop">网络流量监控 - IFTop</h4>
<blockquote>
<p>iftop 是类似于 linux 下面 top 的实时流量监控工具。比 iptraf 直观些。</p>
</blockquote>
<pre><code>yum install iftop 
</code></pre>
<h4 id="网络流量监控-iptraf">网络流量监控 - IPtraf</h4>
<blockquote>
<p>IPtraf 是一个运行在 Linux 下的简单的网络状况分析工具。</p>
</blockquote>
<pre><code>
</code></pre>
<h4 id="查看进程占用带宽情况-nethogs">查看进程占用带宽情况 - Nethogs</h4>
<blockquote>
<p>Nethogs 是一个终端下的网络流量监控工具可以直观的显示每个进程占用的带宽。</p>
</blockquote>
<pre><code>yum install nethogs
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 保持会话]]></title>
        <id>https://yes5144.github.io//post/linux-bao-chi-hui-hua</id>
        <link href="https://yes5144.github.io//post/linux-bao-chi-hui-hua">
        </link>
        <updated>2019-06-29T16:36:09.000Z</updated>
        <content type="html"><![CDATA[<h4 id="tmux">tmux</h4>
<p>参考链接：https://www.cnblogs.com/kevingrace/p/6496899.html</p>
<pre><code>## 安装
yum  install tmux  -y

## 使用
tmux
[root@justdoit ~]# tmux
[root@justdoit ~]# tmux ls
0: 1 windows (created Sun Jun 30 00:32:05 2019) [164x26] (attached)
[root@justdoit ~]# tmux rename -t 0 test_tmux
[root@justdoit ~]# tmux ls
test_tmux: 1 windows (created Sun Jun 30 00:32:05 2019) [164x26] (attached)
[root@justdoit ~]#
### 更多详细用法，请参考上面链接
</code></pre>
<h4 id="screen">screen</h4>
<pre><code>
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django入门]]></title>
        <id>https://yes5144.github.io//post/django-ru-men</id>
        <link href="https://yes5144.github.io//post/django-ru-men">
        </link>
        <updated>2019-06-29T16:15:48.000Z</updated>
        <content type="html"><![CDATA[<p>Type 'django-admin help <subcommand>' for help on a specific subcommand.
Available subcommands:</p>
<p>[django]
check
compilemessages
createcachetable
dbshell
diffsettings
dumpdata
flush
inspectdb
loaddata
makemessages
makemigrations
migrate
runserver
sendtestemail
shell
showmigrations
sqlflush
sqlmigrate
sqlsequencereset
squashmigrations
startapp
startproject
test
testserver</p>
<h4 id="搭建多个互不干扰的开发环境可选">搭建多个互不干扰的开发环境（可选）</h4>
<p>pip install virtualenv virtualenvwrapper</p>
<p>cat &gt;&gt; ~/.bash_profile &lt;&lt;EOF
export WORKON_HOME=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>O</mi><mi>M</mi><mi>E</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>i</mi><mi>r</mi><mi>t</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>v</mi><mi>s</mi><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi><mi>P</mi><mi>R</mi><mi>O</mi><mi>J</mi><mi>E</mi><mi>C</mi><msub><mi>T</mi><mi>H</mi></msub><mi>O</mi><mi>M</mi><mi>E</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">HOME/.virtualenvs
export PROJECT_HOME=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">/</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord mathdefault">u</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>HOME/workspace
source /usr/bin/virtualenvwrapper.sh
EOF</p>
<p>4.2 虚拟环境使用方法：
mkvirtualenv zqxt：创建运行环境zqxt</p>
<p>workon zqxt: 工作在 zqxt 环境 或 从其它环境切换到 zqxt 环境</p>
<p>deactivate: 退出终端环境</p>
<p>其它的：</p>
<p>rmvirtualenv ENV：删除运行环境ENV</p>
<p>mkproject mic：创建mic项目和运行环境mic</p>
<p>mktmpenv：创建临时运行环境</p>
<p>lsvirtualenv: 列出可用的运行环境</p>
<p>lssitepackages: 列出当前环境安装了的包</p>
<p>创建的环境是独立的，互不干扰，无需sudo权限即可使用 pip 来进行包的管理</p>
<p>source ~/.bash_profile</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[salt安装lnmp]]></title>
        <id>https://yes5144.github.io//post/salt-an-zhuang-lnmp</id>
        <link href="https://yes5144.github.io//post/salt-an-zhuang-lnmp">
        </link>
        <updated>2019-06-29T16:13:27.000Z</updated>
        <content type="html"><![CDATA[<pre><code>lamp-install:
  pkg.installed:
    - pkgs:
      - httpd
      - php
      - php-pdo
      - php-mysql

apache-config:
  file.managed:
    - name: /etc/httpd/conf/httpd.conf
    - source: salt://web/files/httpd.conf
    - user: root
    - group: root
    - mode: 644
    - require:
      - pkg: lamp-install

apache-auth:
  pkg.installed:
    - name: httpd-tools
    - require_in:
      - cmd: apache-auth
  cmd.run:
    - name: htpasswd -bc /etc/httpd/conf/htpasswd_file admin admin
    - unless: test -f /etc/httpd/conf/htpasswd_file

apache-conf:
  file.recurse:
    - name: /etc/httpd/conf.d
    - source: salt://web/files/apache-conf.d
    - watch_in:
      - service: lamp-service

/etc/php.ini:
  file.managed:
    - source: salt://web/files/php.ini
    - user: root
    - group: root
    - mode: 644
    - watch_in:
      - service: lamp-service

lamp-service:
  service.running:
    - name: httpd
    - enable: True
    - reload: True
    - watch:
      - file: apache-config

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python美观打印]]></title>
        <id>https://yes5144.github.io//post/python-mei-guan-da-yin</id>
        <link href="https://yes5144.github.io//post/python-mei-guan-da-yin">
        </link>
        <updated>2019-06-28T18:40:14.000Z</updated>
        <content type="html"><![CDATA[<p>参考链接：https://www.cnblogs.com/fingerling/p/8405955.html</p>
<h4 id="5美观打印">5.美观打印</h4>
<p>当打印一些调试信息的时候，美观的打印输出有的时候能让人很直观的看出关键信息，提高调试的效率。</p>
<p>最朴素的打印：</p>
<pre><code>&gt;&gt;&gt; mapping = {'a': 23, 'b': 42, 'c': 0xc0ffee}
&gt;&gt;&gt; str(mapping)
&quot;{'c': 12648430, 'a': 23, 'b': 42}&quot;
</code></pre>
<p>借助内置模块json可以实现更加直观的表现形式：</p>
<pre><code>复制代码
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(mapping, indent=4, sort_keys=True)
{
    &quot;a&quot;: 23,
    &quot;b&quot;: 42,
    &quot;c&quot;: 12648430
}
</code></pre>
<p>复制代码
但是这种方法有一定的限制：</p>
<pre><code>&gt;&gt;&gt; mapping['d'] = {1, 2, 3}
&gt;&gt;&gt; json.dumps(mapping)
TypeError: &quot;set([1, 2, 3]) is not JSON serializable&quot;

&gt;&gt;&gt; json.dumps({all: 'yup'})
TypeError: &quot;keys must be a string&quot;
</code></pre>
<p>所以，还可以使用下面的方式：</p>
<pre><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(mapping)
{'a': 23, 'b': 42, 'c': 12648430, 'd': set([1, 2, 3])}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[saltstack常用操作]]></title>
        <id>https://yes5144.github.io//post/saltstack-chang-yong-cao-zuo</id>
        <link href="https://yes5144.github.io//post/saltstack-chang-yong-cao-zuo">
        </link>
        <updated>2019-06-23T04:37:32.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>saltstack采用c/s架构，角色分为master/slave，建议采用yum部署</p>
</blockquote>
<h4 id="配置minion">配置minion</h4>
<pre><code>vim  /etc/salt/minion
master: master-id
id: hostname&lt;weiyi&gt;

</code></pre>
<h4 id="管理-salt-key">管理 salt key</h4>
<pre><code>salt-key  -L
salt-key  -A
salt-key  -D
salt-key  -a &lt;ID&gt;
salt-key  -d &lt;ID&gt;
salt-key  -l acc|grep -c -v 'Accepted Keys:'
</code></pre>
<h4 id="组织主机节点">组织主机节点</h4>
<pre><code>vim  /etc/salt/master
nodegroups:
  web: 'L@192.168.204.12,192.168.204.13'
  db: 'L@192.168.204.32,192.168.204.33'
## 无需重启salt-master，保存即可生效
salt -N web test.ping
salt -N db test.ping
</code></pre>
<h4 id="模块的调用">模块的调用</h4>
<pre><code>## ping模块
salt node1 test.ping
## cmd模块
salt node2 cmd.run 'id'
salt node2 cmd.run 'curl -L http://scripts.example.com/scripts/example.sh |bash'
### 想携带参数？
salt node2 cmd.scripts salt://scripts/example.sh &quot;arg1 arg2 'arg   3'&quot;
salt node2 cmd.scripts http://scripts.example.com/scripts/example.sh &quot;arguments&quot;

## pkg模块
salt node2 pkg.install 'vsftpd,lftp'
salt node2 pkg.remove 'vsftpd,lftp'

## file.replace
salt node1 file.replace /ets/ssh/sshd_config pattern='#Port 22' repl='Port 22'

## manage
</code></pre>
<h4 id="slssalt-state">SLS(salt state)</h4>
<h4 id="grain">Grain</h4>
<pre><code>salt node1 grains.ls |wc -l
salt node1 grains.item server_type
salt node1 grains.item ip4_interfaces:eth0

</code></pre>
<h4 id="pillar">Pillar</h4>
<blockquote>
<p>Pillar和Grain的区别是什么？
Grain是在Master上面创建的，但它的取值来自于Minion，而且Grain的代码是通过调用模块saltutil.sync_grains将其同步到Minion上面执行的。在执行结果没有返回之前，Grain的值时未知的，需要根据Minion的实际环境确认。
和Grain不同的是，Pillar是在Master上定义和存储的，是为了编写sls文件时便于引用而创建的，它的变量和赋值在执行之前就已经确定好了，和Minion的状态没有关系。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python字符编码转换Unicode和str]]></title>
        <id>https://yes5144.github.io//post/python-zi-fu-bian-ma-zhuan-huan-unicode-he-str</id>
        <link href="https://yes5144.github.io//post/python-zi-fu-bian-ma-zhuan-huan-unicode-he-str">
        </link>
        <updated>2019-06-22T16:56:44.000Z</updated>
        <content type="html"><![CDATA[<p>参考链接1：https://blog.csdn.net/VictoriaW/article/details/75314737</p>
<p>参考链接2：https://blog.csdn.net/sheldonwong/article/details/86684761
Unicode和str</p>
<pre><code>## str 我们平时写的用引号括起来的字符串都是str类型的。
&gt;&gt;&gt; x = '哈哈'
&gt;&gt;&gt; x
'\xb9\xfe\xb9\xfe'
### 根据上面的打印结果，可以知道str类型的x存的其实是二进制序列，而非字符串。为什么会出现这种情况呢？我们赋给x的明明是字符串。
其实很简单，x经过了一次隐形的编码过程encode()。应该采用的是系统默认编码方案。 

## unicode 如果在引号的前面加上字符u，那么我们就得到一个unicode字符串：
&gt;&gt;&gt; x = u'哈哈'
&gt;&gt;&gt; x
u'\u54c8\u54c8'
### unicode对象保存的是字符串本身，而非二进制序列。比如程序中的unicode字符串中包含两个U+54c8字符。

### 为了避免错误，在写入文件之前，应该用utf-8或者gbk编码方案对unicode字符串编码
&gt;&gt;&gt; x = u'哈哈'
&gt;&gt;&gt; x
u'\u54c8\u54c8'
&gt;&gt;&gt; f = open('test.txt', 'w');
&gt;&gt;&gt; x = x.encode('utf-8') #unicode -&gt; str
&gt;&gt;&gt;x
'\xe5\x93\x88\xe5\x93\x88'
&gt;&gt;&gt; f.write(x)

</code></pre>
<blockquote>
<p>Unicode strings can be encoded in plain strings in a variety of ways, according to whichever encoding you choose:
Unicode字符串可以用多种方式编码为普通字符串, 依照你所选择的编码(encoding):</p>
</blockquote>
<pre><code>   1 #将Unicode转换成普通的Python字符串:&quot;编码(encode)&quot;
   2 unicodestring = u&quot;Hello world&quot;
   3 utf8string = unicodestring.encode(&quot;utf-8&quot;)
   4 asciistring = unicodestring.encode(&quot;ascii&quot;)
   5 isostring = unicodestring.encode(&quot;ISO-8859-1&quot;)
   6 utf16string = unicodestring.encode(&quot;utf-16&quot;)
   7 
   8 
   9 #将普通的Python字符串转换成Unicode: &quot;解码(decode)&quot;
  10 plainstring1 = unicode(utf8string, &quot;utf-8&quot;)
  11 plainstring2 = unicode(asciistring, &quot;ascii&quot;)
  12 plainstring3 = unicode(isostring, &quot;ISO-8859-1&quot;)
  13 plainstring4 = unicode(utf16string, &quot;utf-16&quot;)
  14 
  15 assert plainstring1==plainstring2==plainstring3==plainstring4

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python日期模块datetime]]></title>
        <id>https://yes5144.github.io//post/python-ri-qi-mo-kuai-datetime</id>
        <link href="https://yes5144.github.io//post/python-ri-qi-mo-kuai-datetime">
        </link>
        <updated>2019-06-22T16:47:38.000Z</updated>
        <content type="html"><![CDATA[<p>参考链接：https://blog.csdn.net/cmzsteven/article/details/64906245</p>
<pre><code># coding: utf8
import  os
import datetime
print(os.getcwd())
print(os.listdir())

dict_host = [
{u'connections': 2900.0, u'update_time': u'2019-06-22 15:23:32',  u'cpu_idle': 91.0231, u'load_5': 0.16, u'swap_use': 1.6046, u'opt_free': 77.2042, u'server_db': u'74', u'host_name': u'HD-WEB106', u'mem_use': 72.5713, u'db_qps': 0.0, u'id': 8302},
{u'connections': 2888.0, u'update_time': u'2019-06-23 00:32:12',  u'cpu_idle': 91.2088, u'load_5': 0.28, u'swap_use': 1.6081, u'opt_free': 70.3049, u'server_db': u'73', u'host_name': u'HD-WEB110', u'mem_use': 72.1353, u'db_qps': 0.0, u'id': 8319},
{u'connections': 10260.0, u'update_time': u'2019-06-22 17:39:33',  u'cpu_idle': 84.0146, u'load_5': 0.53, u'swap_use': 0.0, u'opt_free': 91.1708, u'server_db': u'86', u'host_name': u'HD-WEB167', u'mem_use': 50.3518, u'db_qps': 0.0, u'id': 8445},
]
# now = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)
now = datetime.datetime.now()
last_hour = (datetime.datetime.now() + datetime.timedelta(hours = -0.4)).strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)
print (type(now),'\t',now)
print (type(last_hour),'\t',last_hour)

print(&quot;#-&quot;*10)
for i in dict_host:
    if i[&quot;update_time&quot;] &gt; last_hour:
        print(type(i[&quot;update_time&quot;]),i[&quot;update_time&quot;])
    else:
        print (&quot;资源信息已过期&quot;)
</code></pre>
]]></content>
    </entry>
</feed>